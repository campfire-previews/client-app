name: Deploy a Prototype Preview App

on:
  pull_request:
    branches:
      - custom_workflow
    types: [opened, reopened]

env:
  AWS_REGION: us-east-2
  PROJECT: client-app
  ECR_REPOSITORY: team5-client-app-test3
  ECS_SERVICE: team5-client-app3-service-lb # eventually change to ${{github.repository}}-${{ github.event.number }}
  ECS_CLUSTER: team5-client-app3-cluster
  CONTAINER_NAME: fargate-app
  COMMIT_ID: ${{ github.event.pull_request.head.sha }}
  PR_NUMBER: ${{ github.event.number }}
  LB_URL: http://client-app.preview.icyntkt.xyz/
  SUBNET_NAME: GANDER  # Gander-Subnet
  SG_NAME: task-security-group    # Gander-Security-3

permissions:
  issues: write
  pull-requests: write

jobs:
  notify_start:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token for GitHub App
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Notify the deployment has started
        uses: hasura/comment-progress@v2.3.0
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          repository: ${{ github.repository }}
          number: ${{ env.PR_NUMBER }}
          id: deploy-preview
          message: "| Status | Message |\n|--------|-------|\n| \U00002692 | Your preview app is currently being built and deployed to AWS |"

  deploy:
    name: Deploy Preview App
    runs-on: ubuntu-latest
    outputs:
      public-url: ${{ steps.generate-public-url.outputs.public-url }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.COMMIT_ID }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create task definition file
        env:
          IMAGE: ${{ steps.build-image.outputs.image }}
        id: create-task-def-temp
        run: |
          cat << TASK_DEF > ./task-definition.json
          {
            "executionRoleArn": "arn:aws:iam::126480444030:role/ecsTaskExecutionRole",
            "family": "$PROJECT-$PR_NUMBER", 
            "networkMode": "awsvpc", 
            "containerDefinitions": [
                {
                    "name": "fargate-app", 
                    "image": "$IMAGE", 
                    "portMappings": [
                        {
                            "containerPort": 5173, 
                            "hostPort": 5173, 
                            "protocol": "tcp"
                        }
                    ], 
                    "essential": true,
                    "logConfiguration": {
                        "logDriver": "awslogs",
                        "options": {
                            "awslogs-group": "client-app-log-group",
                            "awslogs-region": "us-east-2",
                            "awslogs-stream-prefix": "uwu"
                        }
                    }
                }
            ], 
            "requiresCompatibilities": [
                "FARGATE"
            ], 
            "cpu": "256", 
            "memory": "512"
          }
          TASK_DEF
        shell: bash

      - name: Register task definition
        id: register-task-definition
        run: |
          echo "Registering Task Definition"
          echo "APP_TASK_DEF=$(aws ecs register-task-definition \
          --family $PROJECT-$PR_NUMBER \
          --cli-input-json file://task-definition.json \
          --query 'join(`:`,taskDefinition.[family,to_string(revision)])' \
          --output text)" >> $GITHUB_ENV
        shell: bash

      # ========
      - name: Create Target Group
        id: target-group
        run: |
          echo "Creating Target Group"
  
          VPC_ID=$(aws ec2 describe-vpcs \
          --query 'Vpcs[0].VpcId' \
          --output text)
  
          TARGET_GROUP_ARN=$(aws elbv2 create-target-group \
          --name $PROJECT-$PR_NUMBER \
          --vpc-id $VPC_ID \
          --protocol HTTP \
          --port 5173 \
          --target-type ip \
          --query 'TargetGroups[0].TargetGroupArn' \
          --output text)
  
          echo "Creating Rule"
  
          ALB_ARN=$(aws elbv2 describe-load-balancers \
          --query 'LoadBalancers[?LoadBalancerName==`team5-load-balancer`] | [0].LoadBalancerArn' \
          --output text)
  
          LISTENER_ARN=$(aws elbv2 describe-listeners \
          --load-balancer-arn $ALB_ARN \
          --query 'Listeners[?Port==`80`] | [0].ListenerArn' \
          --output text)
  
          cat << RULES >> ./rules-conditions.json
          [
            {
              "Field": "host-header",
              "Values": ["$PROJECT-$PR_NUMBER.preview.icyntkt.xyz"]
            }
          ]
          RULES
  
          RULE_ARN=$(aws elbv2 create-rule \
          --listener-arn $LISTENER_ARN \
          --conditions file://./rules-conditions.json \
          --priority $PR_NUMBER \
          --actions Type=forward,TargetGroupArn=$TARGET_GROUP_ARN \
          --query 'Rules[0].RuleArn' \
          --output text)
  
          echo "TARGET_GROUP_ARN=$TARGET_GROUP_ARN" >> $GITHUB_ENV
        shell: bash

      - name: "Launching App Service"
        run: |
          echo "APP_SERVICE=$(aws ecs create-service \
            --cluster $ECS_CLUSTER \
            --service-name $PROJECT-$PR_NUMBER \
            --task-definition $APP_TASK_DEF \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={ \
                subnets=["subnet-01cef9a94723b1c34", "subnet-0a0f5076b5be2a6ae", "subnet-0906f478444c51e41"], \
                securityGroups=["sg-0dd59509b20ad0cfd"], \
                assignPublicIp=ENABLED \
              }" \
            --load-balancers targetGroupArn=$TARGET_GROUP_ARN,containerName=$CONTAINER_NAME,containerPort=5173 \
            --query 'service.serviceArn' \
            --output text)" >> $GITHUB_ENV
        shell: bash
      
      - name: "Waiting for app service to be stable"
        id: generate-public-url
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $PROJECT-$PR_NUMBER

          echo "PUBLIC_URL=$PROJECT-$PR_NUMBER.preview.icyntkt.xyz" >> $GITHUB_OUTPUT
        shell: bash

  notify_end:
    name: Notify deployment is complete
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Generate token for GitHub App
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Notify Success and post URL
        uses: hasura/comment-progress@v2.3.0
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          repository: ${{ github.repository }}
          number: ${{ env.PR_NUMBER }}
          id: deploy-preview
          message: "| \U00002705 | Yay! Visit your super cool amazing preview app here ${{ needs.deploy.outputs.public-url }} |"
          append: true
